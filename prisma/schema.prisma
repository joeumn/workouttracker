// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  name        String?
  image       String?
  bio         String?
  gender      Gender?
  preferences Json?    // For gym buddy matching preferences
  xp          Int      @default(0)
  level       Int      @default(1)
  streak      Int      @default(0)
  lastCheckIn DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts         Account[]
  sessions         Session[]
  workouts         Workout[]
  macroEntries     MacroEntry[]
  checkIns         CheckIn[]
  groupMemberships GroupMember[]
  groupsOwned      Group[]
  challengeParticipations ChallengeParticipant[]
  socialPosts      SocialPost[]
  postLikes        PostLike[]
  postComments     PostComment[]
  blockedUsers     UserBlock[] @relation("BlockedUser")
  blockedByUsers   UserBlock[] @relation("BlockerUser")
  reports          Report[]
  buddyRequests    BuddyRequest[] @relation("RequesterUser")
  buddyRequestsReceived BuddyRequest[] @relation("RequesteeUser")
  vibePacks        VibePack[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Workout {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  duration    Int?     // Duration in minutes
  calories    Int?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises WorkoutExercise[]

  @@map("workouts")
}

model Exercise {
  id          String @id @default(cuid())
  name        String
  description String?
  category    String?
  instructions String?

  workoutExercises WorkoutExercise[]

  @@map("exercises")
}

model WorkoutExercise {
  id         String @id @default(cuid())
  workoutId  String
  exerciseId String
  sets       Int?
  reps       Int?
  weight     Float?
  distance   Float?
  time       Int?   // Time in seconds
  notes      String?

  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("workout_exercises")
}

model MacroEntry {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  protein     Float    @default(0)
  carbs       Float    @default(0)
  fat         Float    @default(0)
  calories    Float    @default(0)
  water       Float    @default(0) // Water intake in liters
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("macro_entries")
}

model CheckIn {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  mood      Int?     // 1-5 scale
  energy    Int?     // 1-5 scale
  notes     String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("check_ins")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner   User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members GroupMember[]

  @@map("groups")
}

model GroupMember {
  id      String    @id @default(cuid())
  groupId String
  userId  String
  role    GroupRole @default(MEMBER)
  joinedAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_members")
}

model Challenge {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        ChallengeType
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  participants ChallengeParticipant[]

  @@map("challenges")
}

model ChallengeParticipant {
  id          String   @id @default(cuid())
  challengeId String
  userId      String
  progress    Json?    // Flexible progress tracking
  score       Int      @default(0)
  joinedAt    DateTime @default(now())

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
  @@map("challenge_participants")
}

model SocialPost {
  id        String   @id @default(cuid())
  userId    String
  content   String
  image     String?
  type      PostType @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    PostLike[]
  comments PostComment[]

  @@map("social_posts")
}

model PostLike {
  id     String @id @default(cuid())
  postId String
  userId String

  post User @relation(fields: [userId], references: [id], onDelete: Cascade)
  user SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("post_likes")
}

model PostComment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("post_comments")
}

model BuddyRequest {
  id          String      @id @default(cuid())
  requesterId String
  requesteeId String
  status      RequestStatus @default(PENDING)
  message     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  requester User @relation("RequesterUser", fields: [requesterId], references: [id], onDelete: Cascade)
  requestee User @relation("RequesteeUser", fields: [requesteeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, requesteeId])
  @@map("buddy_requests")
}

model UserBlock {
  id        String   @id @default(cuid())
  blockerId String
  blockedId String
  reason    String?
  createdAt DateTime @default(now())

  blocker User @relation("BlockerUser", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlockedUser", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@map("user_blocks")
}

model Report {
  id         String     @id @default(cuid())
  reporterId String
  targetId   String
  type       ReportType
  reason     String
  details    String?
  status     ReportStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  reporter User @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model VibePack {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  type        VibeType
  url         String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vibe_packs")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum GroupRole {
  OWNER
  ADMIN
  MEMBER
}

enum ChallengeType {
  FOUR_WEEK
  WORKOUT_COUNT
  MACRO_GOAL
  STREAK
  CUSTOM
}

enum PostType {
  GENERAL
  WORKOUT
  ACHIEVEMENT
  PROGRESS
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum ReportType {
  HARASSMENT
  INAPPROPRIATE_CONTENT
  SPAM
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum VibeType {
  SPOTIFY_PLAYLIST
  YOUTUBE_PLAYLIST
  FOCUS_VIDEO
}